"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /–¥–æ–±–∞–≤–∏—Ç—å–∫–∞—Ç–µ–≥–æ—Ä–∏—é
"""

import logging
import re
from aiogram import Router, F
from aiogram.types import Message
from aiogram.filters import Command

logger = logging.getLogger(__name__)
router = Router()


@router.message(Command("addcategory"))
async def cmd_add_category(message: Message, database, categorizer):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /addcategory - –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
    try:
        user_id = message.from_user.id
        text = message.text.strip()
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∫–æ–º–∞–Ω–¥—ã
        if text.startswith('/addcategory'):
            params = text[12:].strip()  # –£–±–∏—Ä–∞–µ–º '/addcategory ' –∏–∑ –Ω–∞—á–∞–ª–∞
            
        if not params:
            await message.answer("""üîß <b>–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏</b>

–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /addcategory –ù–∞–∑–≤–∞–Ω–∏–µ:–∫–ª—é—á1,–∫–ª—é—á2,–∫–ª—é—á3

–ü—Ä–∏–º–µ—Ä—ã:
‚Ä¢ /addcategory –†–∞–±–æ—Ç–∞:–ø—Ä–æ–µ–∫—Ç,–∑–∞–¥–∞—á–∞,–¥–µ–¥–ª–∞–π–Ω
‚Ä¢ /addcategory –ó–¥–æ—Ä–æ–≤—å–µ:—Å–ø–æ—Ä—Ç,–¥–∏–µ—Ç–∞,–≤—Ä–∞—á
‚Ä¢ /addcategory –§–∏–Ω–∞–Ω—Å—ã:–¥–µ–Ω—å–≥–∏,–±—é–¥–∂–µ—Ç,—Ç—Ä–∞—Ç—ã""", parse_mode="HTML")
            return
            
        # –ü–∞—Ä—Å–∏–º –Ω–∞–∑–≤–∞–Ω–∏–µ –∏ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞
        if ':' not in params:
            await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: –ù–∞–∑–≤–∞–Ω–∏–µ:–∫–ª—é—á1,–∫–ª—é—á2,–∫–ª—é—á3")
            return
            
        name_part, keywords_part = params.split(':', 1)
        category_name = name_part.strip()
        keywords_str = keywords_part.strip()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        if not category_name:
            await message.answer("‚ùå –ù–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º")
            return
            
        if len(category_name) > 50:
            await message.answer("‚ùå –ù–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ (–º–∞–∫—Å–∏–º—É–º 50 —Å–∏–º–≤–æ–ª–æ–≤)")
            return
            
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞
        if not keywords_str:
            await message.answer("‚ùå –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –Ω–µ –º–æ–≥—É—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º–∏")
            return
            
        keywords_list = [kw.strip() for kw in keywords_str.split(',') if kw.strip()]
        
        if not keywords_list:
            await message.answer("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ –≤–∞–ª–∏–¥–Ω—ã—Ö –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤")
            return
            
        if len(keywords_list) > 20:
            await message.answer("‚ùå –°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤ (–º–∞–∫—Å–∏–º—É–º 20)")
            return
            
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–ª–∏–Ω—É –∫–∞–∂–¥–æ–≥–æ –∫–ª—é—á–µ–≤–æ–≥–æ —Å–ª–æ–≤–∞
        for keyword in keywords_list:
            if len(keyword) > 30:
                await message.answer(f"‚ùå –ö–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ '{keyword}' —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ (–º–∞–∫—Å–∏–º—É–º 30 —Å–∏–º–≤–æ–ª–æ–≤)")
                return
                
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        success = await database.add_custom_category(user_id, category_name, keywords_str)
        
        if success:
            # –ò–Ω–≤–∞–ª–∏–¥–∏—Ä—É–µ–º –∫—ç—à –∫–∞—Ç–µ–≥–æ—Ä–∏–∑–∞—Ç–æ—Ä–∞
            await categorizer.invalidate_cache()
            
            response = f"‚úÖ –ö–∞—Ç–µ–≥–æ—Ä–∏—è '{category_name}' —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞!\n\n"
            response += f"üîß <b>{category_name}</b>\n"
            response += f"–ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞: {', '.join(keywords_list)}"
            
            await message.answer(response, parse_mode="HTML")
            logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –¥–æ–±–∞–≤–∏–ª –∫–∞—Ç–µ–≥–æ—Ä–∏—é '{category_name}' —Å –∫–ª—é—á–µ–≤—ã–º–∏ —Å–ª–æ–≤–∞–º–∏: {keywords_list}")
        else:
            await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ /–¥–æ–±–∞–≤–∏—Ç—å–∫–∞—Ç–µ–≥–æ—Ä–∏—é: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.") 