"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /–∞—Ä—Ö–∏–≤
"""

import logging
import re
from datetime import datetime
from aiogram import Router, F
from aiogram.types import Message
from aiogram.filters import Command
from utils.categorizer import CATEGORY_EMOJIS

logger = logging.getLogger(__name__)
router = Router()

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –æ–∂–∏–¥–∞–Ω–∏—è –¥–∞—Ç—ã
user_states = {}


@router.message(Command("archive"))
async def cmd_archive(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /archive - –∑–∞–ø—Ä–æ—Å –¥–∞—Ç—ã"""
    try:
        user_id = message.from_user.id
        user_states[user_id] = "waiting_date"
        
        response = """üìÖ <b>–ê—Ä—Ö–∏–≤ –∑–∞–ø–∏—Å–µ–π</b>

–û—Ç–ø—Ä–∞–≤—å—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ì–ì–ì–ì-–ú–ú-–î–î

–ü—Ä–∏–º–µ—Ä—ã:
‚Ä¢ 2024-01-15
‚Ä¢ 2024-12-31

–ò–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ '—Å–µ–≥–æ–¥–Ω—è' –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∑–∞–ø–∏—Å–µ–π –∑–∞ —Å–µ–≥–æ–¥–Ω—è."""
        
        await message.answer(response, parse_mode="HTML")
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∑–∞–ø—Ä–æ—Å–∏–ª –∞—Ä—Ö–∏–≤")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ /–∞—Ä—Ö–∏–≤: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")


# –°–æ–∑–¥–∞–µ–º –æ—Ç–¥–µ–ª—å–Ω—ã–π —Ä–æ—É—Ç–µ—Ä –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏–π
state_router = Router()


@state_router.message(F.text & ~F.text.startswith('/'))
async def handle_date_input(message: Message, database):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –¥–∞—Ç—ã –¥–ª—è –∞—Ä—Ö–∏–≤–∞"""
    try:
        user_id = message.from_user.id
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –æ–∂–∏–¥–∞–µ–º –ª–∏ –º—ã –¥–∞—Ç—É –æ—Ç —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if user_id not in user_states or user_states[user_id] != "waiting_date":
            return
            
        # –£–±–∏—Ä–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è
        del user_states[user_id]
        
        date_input = message.text.strip().lower()
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–ª—É—á–∞–µ–≤
        if date_input == "—Å–µ–≥–æ–¥–Ω—è":
            target_date = datetime.now().strftime("%Y-%m-%d")
        else:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã
            if not re.match(r'^\d{4}-\d{2}-\d{2}$', date_input):
                await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ì–ì–ì–ì-–ú–ú-–î–î\n\n–ü—Ä–∏–º–µ—Ä: 2024-01-15")
                return
                
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –¥–∞—Ç—ã
            try:
                datetime.strptime(date_input, "%Y-%m-%d")
                target_date = date_input
            except ValueError:
                await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω–∞—è –¥–∞—Ç–∞. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –≤–≤–µ–¥–µ–Ω–Ω–æ–π –¥–∞—Ç—ã.")
                return
        
        # –ü–æ–ª—É—á–∞–µ–º –∑–∞–ø–∏—Å–∏ –∑–∞ —É–∫–∞–∑–∞–Ω–Ω—É—é –¥–∞—Ç—É
        entries = await database.get_entries_by_date(user_id, target_date)
        
        if not entries:
            await message.answer(f"üìÖ –ó–∞ {target_date} –∑–∞–ø–∏—Å–µ–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
            return
            
        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –∑–∞–ø–∏—Å–∏ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
        categories = {}
        for text, category, datetime_str in entries:
            if category not in categories:
                categories[category] = []
            categories[category].append((text, datetime_str))
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
        response = f"üìÖ <b>–ó–∞–ø–∏—Å–∏ –∑–∞ {target_date}:</b>\n\n"
        
        for category, category_entries in categories.items():
            emoji = CATEGORY_EMOJIS.get(category, "üìù")
            response += f"{emoji} <b>{category}</b> ({len(category_entries)}):\n"
            
            for text, datetime_str in category_entries:
                # –û–±—Ä–µ–∑–∞–µ–º –¥–ª–∏–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç
                display_text = text[:100] + "..." if len(text) > 100 else text
                time_str = datetime_str.split()[1][:5] if ' ' in datetime_str else datetime_str
                response += f"‚Ä¢ {display_text} <i>({time_str})</i>\n"
            
            response += "\n"
        
        # –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ, —Ä–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ —á–∞—Å—Ç–∏
        if len(response) > 4096:
            parts = [response[i:i+4096] for i in range(0, len(response), 4096)]
            for i, part in enumerate(parts):
                if i == 0:
                    await message.answer(part, parse_mode="HTML")
                else:
                    await message.answer(part, parse_mode="HTML")
        else:
            await message.answer(response, parse_mode="HTML")
            
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id} –ø–æ–∫–∞–∑–∞–Ω—ã –∑–∞–ø–∏—Å–∏ –∑–∞ {target_date} ({len(entries)} –∑–∞–ø–∏—Å–µ–π)")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ –≤–≤–æ–¥–∞ –¥–∞—Ç—ã: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞–ø–∏—Å–µ–π. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.") 