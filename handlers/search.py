"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /–ø–æ–∏—Å–∫
"""

import logging
from aiogram import Router, F
from aiogram.types import Message
from aiogram.filters import Command
from utils.categorizer import CATEGORY_EMOJIS

logger = logging.getLogger(__name__)
router = Router()


@router.message(Command("search"))
async def cmd_search(message: Message, database):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /search - –ø–æ–∏—Å–∫ –∑–∞–ø–∏—Å–µ–π –ø–æ –∫–ª—é—á–µ–≤–æ–º—É —Å–ª–æ–≤—É"""
    try:
        user_id = message.from_user.id
        text = message.text.strip()
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å
        if text.startswith('/search'):
            search_term = text[8:].strip()  # –£–±–∏—Ä–∞–µ–º '/search ' –∏–∑ –Ω–∞—á–∞–ª–∞
            
        if not search_term:
            await message.answer("üîç –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /search <—Å–ª–æ–≤–æ>\n\n–ü—Ä–∏–º–µ—Ä: /search –ø—Ä–æ–µ–∫—Ç")
            return
            
        # –ò—â–µ–º –∑–∞–ø–∏—Å–∏
        entries = await database.search_entries(user_id, search_term)
        
        if not entries:
            await message.answer(f"üîç –ü–æ –∑–∞–ø—Ä–æ—Å—É '{search_term}' –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
            return
            
        # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
        response = f"üîç <b>–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞ –ø–æ '{search_term}':</b>\n\n"
        
        for i, (text, category, datetime) in enumerate(entries[:20], 1):  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º 20 —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏
            emoji = CATEGORY_EMOJIS.get(category, "üìù")
            # –û–±—Ä–µ–∑–∞–µ–º –¥–ª–∏–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç
            display_text = text[:150] + "..." if len(text) > 150 else text
            date_str = datetime.split()[0] if ' ' in datetime else datetime
            time_str = datetime.split()[1][:5] if ' ' in datetime else ""
            
            response += f"{i}. {emoji} <b>{category}</b>\n"
            response += f"   {display_text}\n"
            response += f"   <i>{date_str} {time_str}</i>\n\n"
        
        if len(entries) > 20:
            response += f"... –∏ –µ—â—ë {len(entries) - 20} –∑–∞–ø–∏—Å–µ–π"
        
        # –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ, —Ä–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ —á–∞—Å—Ç–∏
        if len(response) > 4096:
            parts = [response[i:i+4096] for i in range(0, len(response), 4096)]
            for i, part in enumerate(parts):
                if i == 0:
                    await message.answer(part, parse_mode="HTML")
                else:
                    await message.answer(part, parse_mode="HTML")
        else:
            await message.answer(response, parse_mode="HTML")
            
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∏—Å–∫–∞–ª '{search_term}', –Ω–∞–π–¥–µ–Ω–æ {len(entries)} –∑–∞–ø–∏—Å–µ–π")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ /–ø–æ–∏—Å–∫: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.") 