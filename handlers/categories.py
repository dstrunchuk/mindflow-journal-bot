"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /categories
"""

import logging
from aiogram import Router, F
from aiogram.types import Message
from aiogram.filters import Command
from utils.categorizer import CATEGORIES, CATEGORY_EMOJIS

logger = logging.getLogger(__name__)
router = Router()


@router.message(Command("categories"))
async def cmd_categories(message: Message, database):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /categories - –ø–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
    try:
        user_id = message.from_user.id
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–∏—Å—Ç–µ–º–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        response = "üìÇ <b>–°–∏—Å—Ç–µ–º–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:</b>\n\n"
        
        for category_name, keywords in CATEGORIES.items():
            if category_name == "–ü—Ä–æ—á–µ–µ":
                continue  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º "–ü—Ä–æ—á–µ–µ"
                
            emoji = CATEGORY_EMOJIS.get(category_name, "üìù")
            keywords_str = ", ".join(keywords[:5])  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 5 –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤
            if len(keywords) > 5:
                keywords_str += "..."
                
            response += f"{emoji} <b>{category_name}</b>\n"
            response += f"   –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞: {keywords_str}\n\n"
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        custom_categories = await database.get_custom_categories(user_id)
        
        if custom_categories:
            response += "üîß <b>–í–∞—à–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:</b>\n\n"
            
            for name, keywords in custom_categories:
                keywords_list = [kw.strip() for kw in keywords.split(',')]
                keywords_str = ", ".join(keywords_list[:5])
                if len(keywords_list) > 5:
                    keywords_str += "..."
                    
                response += f"üîß <b>{name}</b>\n"
                response += f"   –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞: {keywords_str}\n\n"
        else:
            response += "üîß <b>–í–∞—à–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:</b>\n"
            response += "   –ü–æ–∫–∞ –Ω–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π\n\n"
        
        response += "üí° <b>–ö–∞–∫ –¥–æ–±–∞–≤–∏—Ç—å —Å–≤–æ—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é:</b>\n"
        response += "/addcategory –ù–∞–∑–≤–∞–Ω–∏–µ:–∫–ª—é—á1,–∫–ª—é—á2,–∫–ª—é—á3\n\n"
        response += "–ü—Ä–∏–º–µ—Ä: /addcategory –†–∞–±–æ—Ç–∞:–ø—Ä–æ–µ–∫—Ç,–∑–∞–¥–∞—á–∞,–¥–µ–¥–ª–∞–π–Ω"
        
        await message.answer(response, parse_mode="HTML")
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id} –ø–æ–∫–∞–∑–∞–Ω—ã –∫–∞—Ç–µ–≥–æ—Ä–∏–∏")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ /–∫–∞—Ç–µ–≥–æ—Ä–∏–∏: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–π. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.") 