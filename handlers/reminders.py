"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /reminders
"""

import logging
from aiogram import Router, F
from aiogram.types import Message
from aiogram.filters import Command
from datetime import datetime

logger = logging.getLogger(__name__)
router = Router()


@router.message(Command("reminders"))
async def cmd_reminders(message: Message, database):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /reminders - –ø–æ–∫–∞–∑–∞—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        user_id = message.from_user.id
        reminders = await database.get_user_reminders(user_id)
        
        if not reminders:
            await message.answer("‚è∞ –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π.\n\n–°–æ–∑–¥–∞–π—Ç–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ, –Ω–∞–ø–∏—Å–∞–≤ –∑–∞–¥–∞—á—É —Å —É–∫–∞–∑–∞–Ω–∏–µ–º –≤—Ä–µ–º–µ–Ω–∏:\n‚Ä¢ —á–µ—Ä–µ–∑ 10 –º–∏–Ω—É—Ç –Ω—É–∂–Ω–æ –≤—Å—Ç—Ä–µ—Ç–∏—Ç—å –¥—Ä—É–≥–∞\n‚Ä¢ –∑–∞–≤—Ç—Ä–∞ –≤ 9:00 —Å–æ–≤–µ—â–∞–Ω–∏–µ\n‚Ä¢ —á–µ—Ä–µ–∑ —á–∞—Å –ø–æ–∑–≤–æ–Ω–∏—Ç—å –º–∞–º–µ")
            return
            
        # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
        response = "‚è∞ <b>–í–∞—à–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è:</b>\n\n"
        
        for i, (reminder_id, text, reminder_time, is_sent) in enumerate(reminders[:10], 1):  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 10
            # –ü–∞—Ä—Å–∏–º –≤—Ä–µ–º—è
            try:
                dt = datetime.strptime(reminder_time, '%Y-%m-%d %H:%M:%S')
                time_str = dt.strftime('%d.%m %H:%M')
                status = "‚úÖ" if is_sent else "‚è≥"
            except:
                time_str = reminder_time
                status = "‚ùì"
            
            # –û–±—Ä–µ–∑–∞–µ–º –¥–ª–∏–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç
            display_text = text[:100] + "..." if len(text) > 100 else text
            
            response += f"{i}. {status} <b>{time_str}</b>\n"
            response += f"   {display_text}\n\n"
        
        if len(reminders) > 10:
            response += f"... –∏ –µ—â—ë {len(reminders) - 10} –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π"
        
        response += "\nüí° <b>–ö–∞–∫ —Å–æ–∑–¥–∞—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ:</b>\n"
        response += "–ù–∞–ø–∏—à–∏—Ç–µ –∑–∞–¥–∞—á—É —Å —É–∫–∞–∑–∞–Ω–∏–µ–º –≤—Ä–µ–º–µ–Ω–∏:\n"
        response += "‚Ä¢ —á–µ—Ä–µ–∑ 10 –º–∏–Ω—É—Ç –Ω—É–∂–Ω–æ –≤—Å—Ç—Ä–µ—Ç–∏—Ç—å –¥—Ä—É–≥–∞\n"
        response += "‚Ä¢ –∑–∞–≤—Ç—Ä–∞ –≤ 9:00 —Å–æ–≤–µ—â–∞–Ω–∏–µ\n"
        response += "‚Ä¢ —á–µ—Ä–µ–∑ —á–∞—Å –ø–æ–∑–≤–æ–Ω–∏—Ç—å –º–∞–º–µ"
        
        await message.answer(response, parse_mode="HTML")
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id} –ø–æ–∫–∞–∑–∞–Ω—ã –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è ({len(reminders)} —à—Ç—É–∫)")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ /reminders: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.") 