"""
Smart Money Concept Trading System
"""

import pandas as pd
import numpy as np
from datetime import datetime, timedelta
from typing import Dict, List, Optional, Tuple
import logging

from smc_analysis import SMCAnalyzer, SMCSignal, SignalType, MarketStructure
from smc_statistics import SMCStatistics, SignalResult, SignalStatus

logger = logging.getLogger(__name__)

class SMCTradingSystem:
    def __init__(self):
        self.analyzer = SMCAnalyzer()
        self.statistics = SMCStatistics()
        self.active_signals: Dict[str, SMCSignal] = {}
        self.min_confidence = 0.7  # –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –¥–ª—è –≤—Ö–æ–¥–∞
        
    def analyze_market_data(self, df: pd.DataFrame) -> List[SMCSignal]:
        """–ê–Ω–∞–ª–∏–∑ —Ä—ã–Ω–æ—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–∏–≥–Ω–∞–ª–æ–≤"""
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ—Å—Ç—å –¥–∞–Ω–Ω—ã—Ö
            if len(df) < 50:
                logger.warning("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ SMC")
                return []
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–∏–≥–Ω–∞–ª—ã
            signals = self.analyzer.generate_smc_signals(df)
            
            # –§–∏–ª—å—Ç—Ä—É–µ–º –ø–æ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏
            filtered_signals = [s for s in signals if s.confidence >= self.min_confidence]
            
            logger.info(f"–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ {len(signals)} —Å–∏–≥–Ω–∞–ª–æ–≤, –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–æ {len(filtered_signals)}")
            
            return filtered_signals
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ —Ä—ã–Ω–æ—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö: {e}")
            return []
    
    def process_new_signals(self, signals: List[SMCSignal], current_price: float) -> List[str]:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–æ–≤—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤"""
        new_signal_ids = []
        
        for signal in signals:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ—Ç –ª–∏ —É–∂–µ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Å–∏–≥–Ω–∞–ª–∞ —Ç–æ–≥–æ –∂–µ —Ç–∏–ø–∞
            existing_signals = [s for s in self.active_signals.values() if s.signal_type == signal.signal_type]
            
            if not existing_signals:  # –¢–æ–ª—å–∫–æ –µ—Å–ª–∏ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤ —Ç–æ–≥–æ –∂–µ —Ç–∏–ø–∞
                signal_id = self.statistics.add_signal(signal)
                self.active_signals[signal_id] = signal
                new_signal_ids.append(signal_id)
                
                logger.info(f"–ù–æ–≤—ã–π —Å–∏–≥–Ω–∞–ª: {signal_id} - {signal.signal_type.value} @ {signal.entry_price:.4f}")
        
        return new_signal_ids
    
    def update_active_signals(self, current_price: float) -> List[str]:
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤ (–ø—Ä–æ–≤–µ—Ä–∫–∞ SL/TP)"""
        closed_signals = []
        
        for signal_id, signal in list(self.active_signals.items()):
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–æ–ø-–ª–æ—Å—Å
            if self.statistics.check_stop_loss(signal_id, current_price):
                closed_signals.append(signal_id)
                del self.active_signals[signal_id]
                logger.info(f"–°–∏–≥–Ω–∞–ª {signal_id} –∑–∞–∫—Ä—ã—Ç –ø–æ —Å—Ç–æ–ø-–ª–æ—Å—Å—É @ {current_price:.4f}")
                continue
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç
            if self.statistics.check_take_profit(signal_id, current_price):
                closed_signals.append(signal_id)
                del self.active_signals[signal_id]
                logger.info(f"–°–∏–≥–Ω–∞–ª {signal_id} –∑–∞–∫—Ä—ã—Ç –ø–æ —Ç–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç—É @ {current_price:.4f}")
                continue
        
        return closed_signals
    
    def get_signal_recommendation(self, signal: SMCSignal) -> str:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –¥–ª—è —Å–∏–≥–Ω–∞–ª–∞"""
        direction = "üü¢ LONG" if signal.signal_type == SignalType.LONG else "üî¥ SHORT"
        
        recommendation = f"""
üéØ SMC –°–∏–≥–Ω–∞–ª: {direction}

üí∞ Entry: {signal.entry_price:.4f}
üõë Stop Loss: {signal.stop_loss:.4f}
üéØ Take Profit: {signal.take_profit:.4f}

üìä –î–µ—Ç–∞–ª–∏:
‚Ä¢ –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {signal.confidence:.1%}
‚Ä¢ –°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ä—ã–Ω–∫–∞: {signal.market_structure.value}
‚Ä¢ Order Block: {signal.order_block.direction} (—Å–∏–ª–∞: {signal.order_block.strength:.1%})

üí° –õ–æ–≥–∏–∫–∞:
‚Ä¢ –°—Ç–æ–ø —Ä–∞–∑–º–µ—â–µ–Ω –∑–∞ –≥—Ä–∞–Ω–∏—Ü–µ–π Order Block
‚Ä¢ –¢–µ–π–∫ —Ä–∞—Å—Å—á–∏—Ç–∞–Ω –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–∞–∑–º–µ—Ä–∞ OB (2x)
‚Ä¢ –°–∏–≥–Ω–∞–ª –æ—Å–Ω–æ–≤–∞–Ω –Ω–∞ {signal.market_structure.value} —Å—Ç—Ä—É–∫—Ç—É—Ä–µ
"""
        
        if signal.fvg:
            recommendation += f"‚Ä¢ Fair Value Gap: {signal.fvg.direction} ({signal.fvg.low:.4f} - {signal.fvg.high:.4f})\n"
        
        return recommendation
    
    def get_market_analysis(self, df: pd.DataFrame) -> str:
        """–ê–Ω–∞–ª–∏–∑ —Ç–µ–∫—É—â–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Ä—ã–Ω–∫–∞"""
        if len(df) < 20:
            return "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞"
        
        market_structure = self.analyzer.analyze_market_structure(df)
        current_price = df.iloc[-1]['close']
        
        # –ü–æ–∏—Å–∫ Order Blocks
        bullish_obs = self.analyzer.find_order_blocks(df, "bullish")
        bearish_obs = self.analyzer.find_order_blocks(df, "bearish")
        
        # –ü–æ–∏—Å–∫ FVG
        fvgs = self.analyzer.find_fair_value_gaps(df)
        
        analysis = f"""
üìä –ê–Ω–∞–ª–∏–∑ —Ä—ã–Ω–∫–∞:

üéØ –°—Ç—Ä—É–∫—Ç—É—Ä–∞: {market_structure.value.upper()}
üí∞ –¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞: {current_price:.4f}

üì¶ Order Blocks:
‚Ä¢ Bullish: {len(bullish_obs)}
‚Ä¢ Bearish: {len(bearish_obs)}

üï≥Ô∏è Fair Value Gaps: {len(fvgs)}

üîÑ –ê–∫—Ç–∏–≤–Ω—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤: {len(self.active_signals)}
"""
        
        if self.active_signals:
            analysis += "\nüìã –ê–∫—Ç–∏–≤–Ω—ã–µ —Å–∏–≥–Ω–∞–ª—ã:\n"
            for signal_id, signal in self.active_signals.items():
                status = "üü¢" if signal.signal_type == SignalType.LONG else "üî¥"
                analysis += f"‚Ä¢ {status} {signal_id}: {signal.signal_type.value} @ {signal.entry_price:.4f}\n"
        
        return analysis
    
    def get_performance_report(self, days: int = 30) -> str:
        """–û—Ç—á–µ—Ç –æ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏"""
        return self.statistics.generate_report(days)
    
    def export_statistics(self, filename: str = None) -> str:
        """–≠–∫—Å–ø–æ—Ä—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –≤ CSV"""
        if filename is None:
            filename = f"smc_statistics_{datetime.now().strftime('%Y%m%d_%H%M%S')}.csv"
        
        df = self.statistics.export_to_dataframe()
        df.to_csv(filename, index=False)
        
        logger.info(f"–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–∞ –≤ {filename}")
        return filename
    
    def validate_signal_logic(self, signal: SMCSignal) -> bool:
        """–í–∞–ª–∏–¥–∞—Ü–∏—è –ª–æ–≥–∏–∫–∏ —Å–∏–≥–Ω–∞–ª–∞"""
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–æ–≥–∏—á–Ω–æ—Å—Ç—å —Å—Ç–æ–ø–æ–≤ –∏ —Ç–µ–π–∫–æ–≤
        if signal.signal_type == SignalType.LONG:
            # –î–ª—è –ª–æ–Ω–≥–∞: —Å—Ç–æ–ø –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –Ω–∏–∂–µ –≤—Ö–æ–¥–∞, —Ç–µ–π–∫ –≤—ã—à–µ
            if signal.stop_loss >= signal.entry_price:
                logger.warning(f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Å—Ç–æ–ø –¥–ª—è LONG: {signal.stop_loss} >= {signal.entry_price}")
                return False
            if signal.take_profit <= signal.entry_price:
                logger.warning(f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ç–µ–π–∫ –¥–ª—è LONG: {signal.take_profit} <= {signal.entry_price}")
                return False
        else:  # SHORT
            # –î–ª—è —à–æ—Ä—Ç–∞: —Å—Ç–æ–ø –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤—ã—à–µ –≤—Ö–æ–¥–∞, —Ç–µ–π–∫ –Ω–∏–∂–µ
            if signal.stop_loss <= signal.entry_price:
                logger.warning(f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Å—Ç–æ–ø –¥–ª—è SHORT: {signal.stop_loss} <= {signal.entry_price}")
                return False
            if signal.take_profit >= signal.entry_price:
                logger.warning(f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ç–µ–π–∫ –¥–ª—è SHORT: {signal.take_profit} >= {signal.entry_price}")
                return False
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä Order Block
        ob_size = signal.order_block.high - signal.order_block.low
        if ob_size <= 0:
            logger.warning("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ä–∞–∑–º–µ—Ä Order Block")
            return False
        
        return True
    
    def run_analysis_cycle(self, df: pd.DataFrame, current_price: float) -> Dict:
        """–ü–æ–ª–Ω—ã–π —Ü–∏–∫–ª –∞–Ω–∞–ª–∏–∑–∞ –∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–∏–≥–Ω–∞–ª–æ–≤"""
        try:
            # –û–±–Ω–æ–≤–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ —Å–∏–≥–Ω–∞–ª—ã
            closed_signals = self.update_active_signals(current_price)
            
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä—ã–Ω–æ–∫
            new_signals = self.analyze_market_data(df)
            
            # –í–∞–ª–∏–¥–∏—Ä—É–µ–º —Å–∏–≥–Ω–∞–ª—ã
            valid_signals = [s for s in new_signals if self.validate_signal_logic(s)]
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –Ω–æ–≤—ã–µ —Å–∏–≥–Ω–∞–ª—ã
            new_signal_ids = self.process_new_signals(valid_signals, current_price)
            
            return {
                "new_signals": new_signal_ids,
                "closed_signals": closed_signals,
                "active_signals": len(self.active_signals),
                "total_analyzed": len(new_signals),
                "valid_signals": len(valid_signals)
            }
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ —Ü–∏–∫–ª–µ –∞–Ω–∞–ª–∏–∑–∞: {e}")
            return {
                "new_signals": [],
                "closed_signals": [],
                "active_signals": len(self.active_signals),
                "total_analyzed": 0,
                "valid_signals": 0,
                "error": str(e)
            } 