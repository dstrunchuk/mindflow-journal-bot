"""
–ú–æ–¥—É–ª—å –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∑–∞—Ü–∏–∏ —Ç–µ–∫—Å—Ç–∞
"""

import logging
from typing import Dict, List, Tuple

logger = logging.getLogger(__name__)

# –°–∏—Å—Ç–µ–º–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Å –∫–ª—é—á–µ–≤—ã–º–∏ —Å–ª–æ–≤–∞–º–∏
CATEGORIES = {
    "–ó–∞–¥–∞—á–∏": ["–Ω—É–∂–Ω–æ", "—Å–¥–µ–ª–∞—Ç—å", "–∑–∞–≤—Ç—Ä–∞", "–≤—Å—Ç—Ä–µ—Ç–∏—Ç—å—Å—è", "–æ—Ç–ø—Ä–∞–≤–∏—Ç—å", "–∫—É–ø–∏—Ç—å", "–∑–∞–ø–∏—Å–∞—Ç—å—Å—è", "–ø–æ–∑–≤–æ–Ω–∏—Ç—å"],
    "–ò–¥–µ–∏": ["–∏–¥–µ—è", "–º–æ–∂–Ω–æ –±—ã–ª–æ –±—ã", "–±—ã–ª–æ –±—ã –∫—Ä—É—Ç–æ", "–ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å", "–∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ", "–∫—Ä–µ–∞—Ç–∏–≤–Ω–æ", "–Ω–æ–≤–æ–µ"],
    "–í–æ–ø—Ä–æ—Å—ã": ["–ø–æ—á–µ–º—É", "–∫–∞–∫", "–∑–∞—á–µ–º", "—á—Ç–æ –±—É–¥–µ—Ç –µ—Å–ª–∏", "–∫–æ–≥–¥–∞", "–≥–¥–µ", "–∫—Ç–æ", "?"],
    "–¢—Ä–µ–≤–æ–≥–∏": ["–±–æ—é—Å—å", "–≤–æ–ª–Ω—É—é—Å—å", "–Ω–∞–ø—Ä—è–≥–∞–µ—Ç", "–ø–µ—Ä–µ–∂–∏–≤–∞—é", "—Ç—Ä–µ–≤–æ–≥–∞", "—Å—Ç—Ä–∞—Ö", "–±–µ—Å–ø–æ–∫–æ—é—Å—å", "–Ω–µ—É–≤–µ—Ä–µ–Ω"],
    "–§–∞–∫—Ç—ã": ["—Ü–∏—Ç–∞—Ç–∞", "–∑–∞–ø–æ–º–Ω–∏", "—Ñ–∞–∫—Ç", "–∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ", "—É–∑–Ω–∞–ª", "–ø—Ä–æ—á–∏—Ç–∞–ª", "—É—Å–ª—ã—à–∞–ª"],
    "–ü–ª–∞–Ω—ã": ["–º–µ—á—Ç–∞—é", "–ø–ª–∞–Ω–∏—Ä—É—é", "—Ü–µ–ª—å", "—Ö–æ—á—É", "–±—É–¥—É", "—Å–æ–±–∏—Ä–∞—é—Å—å", "–Ω–∞–º–µ—Ä–µ–Ω"],
    "–ü—Ä–æ—á–µ–µ": []
}

# –≠–º–æ–¥–∑–∏ –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π
CATEGORY_EMOJIS = {
    "–ó–∞–¥–∞—á–∏": "üìã",
    "–ò–¥–µ–∏": "üí°",
    "–í–æ–ø—Ä–æ—Å—ã": "‚ùì",
    "–¢—Ä–µ–≤–æ–≥–∏": "üò∞",
    "–§–∞–∫—Ç—ã": "üìö",
    "–ü–ª–∞–Ω—ã": "üéØ",
    "–ü—Ä–æ—á–µ–µ": "üìù"
}


class Categorizer:
    def __init__(self, database=None):
        self.database = database
        self._custom_categories_cache = {}
        self._cache_updated = False

    async def _load_custom_categories(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
        if not self.database or self._cache_updated:
            return

        try:
            custom_categories = await self.database.get_all_custom_categories()
            self._custom_categories_cache.clear()
            
            for user_id, name, keywords in custom_categories:
                if user_id not in self._custom_categories_cache:
                    self._custom_categories_cache[user_id] = {}
                self._custom_categories_cache[user_id][name] = [
                    kw.strip().lower() for kw in keywords.split(',')
                ]
            
            self._cache_updated = True
            logger.info("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∑–∞–≥—Ä—É–∂–µ–Ω—ã –≤ –∫—ç—à")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π: {e}")

    def _check_keywords(self, text: str, keywords: List[str]) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤ –≤ —Ç–µ–∫—Å—Ç–µ"""
        text_lower = text.lower()
        return any(keyword.lower() in text_lower for keyword in keywords)

    async def categorize(self, text: str, user_id: int = None) -> Tuple[str, str]:
        """
        –ö–∞—Ç–µ–≥–æ—Ä–∏–∑–∞—Ü–∏—è —Ç–µ–∫—Å—Ç–∞
        
        Args:
            text: –¢–µ–∫—Å—Ç –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∑–∞—Ü–∏–∏
            user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π
            
        Returns:
            Tuple[str, str]: (–Ω–∞–∑–≤–∞–Ω–∏–µ_–∫–∞—Ç–µ–≥–æ—Ä–∏–∏, —ç–º–æ–¥–∑–∏_–∫–∞—Ç–µ–≥–æ—Ä–∏–∏)
        """
        await self._load_custom_categories()
        
        # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        if user_id and user_id in self._custom_categories_cache:
            for category_name, keywords in self._custom_categories_cache[user_id].items():
                if self._check_keywords(text, keywords):
                    logger.info(f"–¢–µ–∫—Å—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏–∑–∏—Ä–æ–≤–∞–Ω –∫–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è '{category_name}'")
                    return category_name, "üîß"  # –≠–º–æ–¥–∑–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π

        # –ó–∞—Ç–µ–º –ø—Ä–æ–≤–µ—Ä—è–µ–º —Å–∏—Å—Ç–µ–º–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        for category_name, keywords in CATEGORIES.items():
            if category_name == "–ü—Ä–æ—á–µ–µ":
                continue  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º "–ü—Ä–æ—á–µ–µ" - —ç—Ç–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
                
            if self._check_keywords(text, keywords):
                emoji = CATEGORY_EMOJIS.get(category_name, "üìù")
                logger.info(f"–¢–µ–∫—Å—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏–∑–∏—Ä–æ–≤–∞–Ω –∫–∞–∫ '{category_name}'")
                return category_name, emoji

        # –ï—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º "–ü—Ä–æ—á–µ–µ"
        logger.info("–¢–µ–∫—Å—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏–∑–∏—Ä–æ–≤–∞–Ω –∫–∞–∫ '–ü—Ä–æ—á–µ–µ'")
        return "–ü—Ä–æ—á–µ–µ", CATEGORY_EMOJIS["–ü—Ä–æ—á–µ–µ"]

    def get_all_categories(self) -> Dict[str, List[str]]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö —Å–∏—Å—Ç–µ–º–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π"""
        return CATEGORIES.copy()

    def get_category_emoji(self, category: str) -> str:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —ç–º–æ–¥–∑–∏ –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
        return CATEGORY_EMOJIS.get(category, "üìù")

    async def invalidate_cache(self):
        """–ò–Ω–≤–∞–ª–∏–¥–∞—Ü–∏—è –∫—ç—à–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π"""
        self._cache_updated = False
        logger.info("–ö—ç—à –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π –∏–Ω–≤–∞–ª–∏–¥–∏—Ä–æ–≤–∞–Ω") 