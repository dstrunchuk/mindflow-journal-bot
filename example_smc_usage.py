"""
–ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è Smart Money Concept Trading System
"""

import pandas as pd
import numpy as np
from datetime import datetime, timedelta
import logging

from smc_trading_system import SMCTradingSystem
from smc_analysis import SignalType

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

def create_sample_data(symbol: str = "BTCUSDT", days: int = 100) -> pd.DataFrame:
    """–°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""
    np.random.seed(42)
    
    # –ë–∞–∑–æ–≤—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
    start_price = 50000
    dates = pd.date_range(start=datetime.now() - timedelta(days=days), 
                         end=datetime.now(), freq='30min')
    
    # –°–æ–∑–¥–∞–µ–º —Ç—Ä–µ–Ω–¥–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ —Å —à—É–º–æ–º
    trend = np.linspace(0, 0.1, len(dates))  # –í–æ—Å—Ö–æ–¥—è—â–∏–π —Ç—Ä–µ–Ω–¥
    noise = np.random.normal(0, 0.005, len(dates))
    prices = start_price * (1 + trend + noise)
    
    # –°–æ–∑–¥–∞–µ–º OHLC –¥–∞–Ω–Ω—ã–µ
    data = []
    for i, (date, price) in enumerate(zip(dates, prices)):
        # –°–æ–∑–¥–∞–µ–º —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–µ —Å–≤–µ—á–∏
        volatility = price * 0.002  # 0.2% –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å
        
        open_price = price + np.random.normal(0, volatility/2)
        high_price = max(open_price, price) + abs(np.random.normal(0, volatility/2))
        low_price = min(open_price, price) - abs(np.random.normal(0, volatility/2))
        close_price = price + np.random.normal(0, volatility/2)
        
        data.append({
            'timestamp': date,
            'open': open_price,
            'high': high_price,
            'low': low_price,
            'close': close_price,
            'volume': np.random.uniform(1000, 10000)
        })
    
    df = pd.DataFrame(data)
    df.set_index('timestamp', inplace=True)
    
    return df

def run_smc_demo():
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Ä–∞–±–æ—Ç—ã SMC —Å–∏—Å—Ç–µ–º—ã"""
    print("üöÄ –ó–∞–ø—É—Å–∫ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ Smart Money Concept Trading System")
    print("=" * 60)
    
    # –°–æ–∑–¥–∞–µ–º —Ç–æ—Ä–≥–æ–≤—É—é —Å–∏—Å—Ç–µ–º—É
    smc_system = SMCTradingSystem()
    
    # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
    print("üìä –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö...")
    df = create_sample_data("BTCUSDT", days=30)
    print(f"–°–æ–∑–¥–∞–Ω–æ {len(df)} —Å–≤–µ—á–µ–π")
    
    # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä—ã–Ω–æ–∫
    print("\nüîç –ê–Ω–∞–ª–∏–∑ —Ä—ã–Ω–∫–∞...")
    market_analysis = smc_system.get_market_analysis(df)
    print(market_analysis)
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Ü–∏–∫–ª –∞–Ω–∞–ª–∏–∑–∞
    print("\nüîÑ –ó–∞–ø—É—Å–∫ —Ü–∏–∫–ª–∞ –∞–Ω–∞–ª–∏–∑–∞...")
    current_price = df.iloc[-1]['close']
    result = smc_system.run_analysis_cycle(df, current_price)
    
    print(f"–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞:")
    print(f"‚Ä¢ –ù–æ–≤—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤: {len(result['new_signals'])}")
    print(f"‚Ä¢ –ó–∞–∫—Ä—ã—Ç—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤: {len(result['closed_signals'])}")
    print(f"‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤: {result['active_signals']}")
    print(f"‚Ä¢ –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ: {result['total_analyzed']}")
    print(f"‚Ä¢ –í–∞–ª–∏–¥–Ω—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤: {result['valid_signals']}")
    
    # –ï—Å–ª–∏ –µ—Å—Ç—å –Ω–æ–≤—ã–µ —Å–∏–≥–Ω–∞–ª—ã, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
    if result['new_signals']:
        print("\nüéØ –ù–æ–≤—ã–µ —Å–∏–≥–Ω–∞–ª—ã:")
        for signal_id in result['new_signals']:
            signal = smc_system.active_signals[signal_id]
            recommendation = smc_system.get_signal_recommendation(signal)
            print(recommendation)
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    print("\nüìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏:")
    performance_report = smc_system.get_performance_report(days=30)
    print(performance_report)
    
    # –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    print("\nüíæ –≠–∫—Å–ø–æ—Ä—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏...")
    filename = smc_system.export_statistics()
    print(f"–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤: {filename}")
    
    print("\n‚úÖ –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")

def test_signal_validation():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Å–∏–≥–Ω–∞–ª–æ–≤"""
    print("\nüß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Å–∏–≥–Ω–∞–ª–æ–≤")
    print("=" * 40)
    
    smc_system = SMCTradingSystem()
    
    # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
    df = create_sample_data("BTCUSDT", days=50)
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–∏–≥–Ω–∞–ª—ã
    signals = smc_system.analyze_market_data(df)
    
    print(f"–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ —Å–∏–≥–Ω–∞–ª–æ–≤: {len(signals)}")
    
    # –í–∞–ª–∏–¥–∏—Ä—É–µ–º –∫–∞–∂–¥—ã–π —Å–∏–≥–Ω–∞–ª
    for i, signal in enumerate(signals):
        is_valid = smc_system.validate_signal_logic(signal)
        status = "‚úÖ –í–∞–ª–∏–¥–µ–Ω" if is_valid else "‚ùå –ù–µ–≤–∞–ª–∏–¥–µ–Ω"
        
        print(f"–°–∏–≥–Ω–∞–ª {i+1}: {signal.signal_type.value} @ {signal.entry_price:.4f} - {status}")
        
        if not is_valid:
            print(f"  ‚Ä¢ Entry: {signal.entry_price:.4f}")
            print(f"  ‚Ä¢ Stop: {signal.stop_loss:.4f}")
            print(f"  ‚Ä¢ Take Profit: {signal.take_profit:.4f}")

if __name__ == "__main__":
    # –ó–∞–ø—É—Å–∫–∞–µ–º –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—é
    run_smc_demo()
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –≤–∞–ª–∏–¥–∞—Ü–∏—é
    test_signal_validation() 